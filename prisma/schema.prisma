generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Leads {
  id                         String        @id @db.VarChar(20)
  first_name                 String        @db.VarChar(100)
  last_name                  String?       @db.VarChar(100)
  phone                      String        @db.VarChar(15)
  email                      String?       @unique @db.VarChar(255)
  area                       String?       @db.VarChar(255)
  community                  String?       @db.VarChar(100)
  walkin_date                DateTime?     @db.Date
  expected_budget            Int           @default(0) @db.Integer
  demo_taken                 Boolean?      @default(false)
  number_of_contact_attempts Int?          @default(0) @db.Integer
  last_contacted_date        DateTime?     @db.Timestamptz(6)
  next_followup              DateTime?     @db.Timestamptz(6)
  stage_id                   String?       @db.VarChar(20)
  stage                      Stage?        @relation(fields: [stage_id], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "fk_stage")
  team_member_id             String?       @db.VarChar(20)
  team_member                TeamMember?   @relation(fields: [team_member_id], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "fk_team_member")
  instruments                Instruments[] @relation("LeadInstrument")
  source_id                  String?       @db.VarChar(20)
  source                     Sources?      @relation(fields: [source_id], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "fk_source")
  student                    Student[]
  notes                      Notes[]
  create_date                DateTime?     @default(now()) @db.Timestamptz(6)
  updated_date               DateTime?     @updatedAt @db.Timestamptz(6)

  is_deleted Boolean   @default(false)
  deleted_at DateTime? @db.Timestamptz(6)

  @@index([is_deleted])
}

model Student {
  id                String       @id @db.VarChar(20)
  first_name        String       @db.VarChar(100)
  last_name         String?      @db.VarChar(100)
  parent_first_name String       @db.VarChar(100)
  parent_last_name  String?      @db.VarChar(100)
  parent_phone      String?      @db.VarChar(15)
  address           String?      @db.Text
  gmaps_place_id    String?      @db.VarChar(255)
  gmaps_url         String?      @db.VarChar(1024)
  gmaps_latitude    Decimal?     @db.Decimal(10, 8)
  gmaps_longitude   Decimal?     @db.Decimal(11, 8)
  dob               DateTime     @db.Date
  gender            Gender       @default(UNDISCLOSED)
  email             String?      @db.VarChar(100)
  primary_contact   String       @db.VarChar(20)
  secondary_contact String?      @db.VarChar(20)
  intended_subject  String?      @db.VarChar(100)
  learning_goal     String?      @db.VarChar(100)
  create_date       DateTime     @default(now()) @db.Timestamptz(6)
  updated_date      DateTime     @updatedAt @db.Timestamptz(6)
  lead_id           String?      @db.VarChar(20)
  lead              Leads?       @relation(fields: [lead_id], references: [id])
  enrollments       Enrollment[]
  user              User?

  is_deleted Boolean   @default(false)
  deleted_at DateTime? @db.Timestamptz(6)

  @@index([is_deleted])
}

model Enrollment {
  id                   String           @id @db.VarChar(20)
  amount_paid          Int              @default(0) @db.Integer
  start_date           DateTime         @db.Date
  preferred_time_slots Json?
  slots_remaining      Int              @default(0) @db.Integer
  student_id           String           @db.VarChar(20)
  student              Student          @relation(fields: [student_id], references: [id])
  plan_code            String           @db.VarChar(10)
  plan_name            Plans            @relation(fields: [plan_code], references: [code])
  course_id            String           @db.VarChar(20)
  course               Course           @relation(fields: [course_id], references: [id])
  status               EnrollmentStatus @default(ACTIVE)
  events               Event[]          @relation("EventGuests")

  create_date  DateTime  @default(now()) @db.Timestamptz(6)
  updated_date DateTime  @updatedAt @db.Timestamptz(6)
  is_deleted   Boolean?  @default(false)
  deleted_at   DateTime? @db.Timestamptz(6)

  @@index([student_id])
  @@index([course_id])
  @@index([is_deleted])
}

model Course {
  id            String           @id @db.VarChar(20)
  name          String           @unique @db.VarChar(100)
  difficulty    CourseDifficulty @default(FOUNDATION)
  description   String?          @db.VarChar(255)
  instrument_id String?          @db.VarChar(20)
  instrument    Instruments?     @relation(fields: [instrument_id], references: [id])
  teachers      TeamMember[]     @relation("TeacherCourses")
  enrollments   Enrollment[]

  create_date  DateTime @default(now()) @db.Timestamptz(6)
  updated_date DateTime @updatedAt @db.Timestamptz(6)
}

model Plans {
  code        String       @id @db.VarChar(10)
  name        String       @db.VarChar(20)
  price       Int          @default(0) @db.Integer
  total_slots Int          @default(0) @db.Integer
  description String?      @db.VarChar(255)
  enrollment  Enrollment[]

  create_date  DateTime @default(now()) @db.Timestamptz(6)
  updated_date DateTime @updatedAt @db.Timestamptz(6)
}

model Stage {
  id    String  @id @db.VarChar(20)
  name  String  @unique @db.VarChar(100)
  color String? @default("#99a1af") @db.VarChar(10)
  leads Leads[]
}

model Sources {
  id          String  @id @db.VarChar(20)
  source      String  @db.VarChar(100)
  description String? @db.VarChar(255)
  leads       Leads[]
}

model Instruments {
  id          String   @id @db.VarChar(20)
  name        String   @unique @db.VarChar(50)
  description String?  @db.VarChar(255)
  leads       Leads[]  @relation("LeadInstrument")
  courses     Course[]
}

model TeamMember {
  id         String         @id @db.VarChar(20)
  first_name String         @db.VarChar(100)
  last_name  String         @db.VarChar(100)
  email      String?        @unique @db.VarChar(255)
  bio        String?        @db.Text
  avatar     String?        @db.VarChar(255)
  phone      String         @db.VarChar(15)
  role       TeamMemberRole @default(STAFF)
  active     Boolean?       @default(false)
  courses    Course[]       @relation("TeacherCourses")
  leads      Leads[]

  hosted_events  Event[] @relation("HostedEvents")
  created_events Event[] @relation("CreatedEvents")
  user           User?

  create_date  DateTime @default(now()) @db.Timestamptz(6)
  updated_date DateTime @updatedAt @db.Timestamptz(6)

  is_deleted Boolean   @default(false)
  deleted_at DateTime? @db.Timestamptz(6)

  @@index([is_deleted])
}

model Notes {
  id        String   @id @db.VarChar(20)
  content   String   @db.Text
  is_pinned Boolean? @db.Boolean

  author_id String
  author    User   @relation(fields: [author_id], references: [id])
  lead_id   String @db.VarChar(20)
  lead      Leads  @relation(fields: [lead_id], references: [id])

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  @@index([lead_id])
  @@index([author_id])
  @@index([created_at])
}

model Event {
  id              String   @id @db.VarChar(20)
  title           String   @db.VarChar(255)
  description     String?  @db.Text
  start_date_time DateTime @db.Timestamptz(6)
  end_date_time   DateTime @db.Timestamptz(6)

  host_id       String
  host          TeamMember   @relation("HostedEvents", fields: [host_id], references: [id])
  guests        Enrollment[] @relation("EventGuests")
  created_by_id String?
  created_by    TeamMember?  @relation("CreatedEvents", fields: [created_by_id], references: [id])

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  @@unique([host_id, start_date_time, end_date_time], name: "host_id_start_date_time_end_date_time")
  @@index([host_id])
  @@index([start_date_time])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  role          UserRoles @default(DEFAULT)
  notes         Notes[]

  team_member    TeamMember? @relation(fields: [team_member_id], references: [id])
  team_member_id String?     @unique

  student    Student? @relation(fields: [student_id], references: [id])
  student_id String?  @unique

  @@map("users")
}

enum UserRoles {
  DEFAULT
  STAFF
  INSTRUCTOR
  ADMIN
  SUPER_ADMIN
}

enum TeamMemberRole {
  STAFF
  INSTRUCTOR
  ADMIN
  SUPER_ADMIN
}

enum CourseDifficulty {
  FOUNDATION
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum Gender {
  MALE
  FEMALE
  UNDISCLOSED
}
